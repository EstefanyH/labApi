name: Build, Push and Redeploy

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=,suffix=-{{date 'YYYYMMDDHHmmss'}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Get latest image tag
        id: get-image-tag
        run: |
          LATEST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | grep -E 'sha-[0-9]{14}' | head -n 1)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "🆕 Image tag: $LATEST_TAG"

      - name: Save image tag to artifact
        run: |
          echo "${{ steps.get-image-tag.outputs.LATEST_TAG }}" > image_tag.txt
        shell: bash

      - name: Upload image tag artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-tag
          path: image_tag.txt

  redeploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Download image tag artifact
        uses: actions/download-artifact@v4
        with:
          name: image-tag
          path: .

      - name: Read image tag
        id: image-tag
        run: |
          IMAGE_TAG=$(cat image_tag.txt)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "📦 Image a desplegar: $IMAGE_TAG"

      - name: Install Koyeb CLI
        run: |
          curl -L https://github.com/koyeb/koyeb-cli/releases/download/v5.7.0/koyeb-cli_5.7.0_linux_amd64.tar.gz | tar -xz
          sudo mv koyeb /usr/local/bin/
          sudo chmod +x /usr/local/bin/koyeb

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Update Koyeb service with new image
        run: |
          echo "🔄 Actualizando servicio con la imagen: ${{ steps.image-tag.outputs.IMAGE_TAG }}"
          
          # Actualizar el servicio con la nueva imagen
          koyeb service update "${{ secrets.KOYEB_BACKEND_SERVICE_NAME }}" \
            --image "${{ steps.image-tag.outputs.IMAGE_TAG }}" \
            --token "${{ secrets.KOYEB_API_TOKEN }}"
          
          echo "✅ Servicio actualizado con la nueva imagen"

      - name: Wait for deployment to complete
        run: |
          echo "⏳ Esperando a que el despliegue se complete..."
          sleep 30
          
          max_attempts=12
          attempt=1
          deployment_done=false
          
          while [ $attempt -le $max_attempts ] && [ "$deployment_done" = false ]; do
            echo "📋 Verificando estado (intento $attempt/$max_attempts)..."
            
            # Obtener información del servicio
            service_info=$(koyeb service get "${{ secrets.KOYEB_BACKEND_SERVICE_NAME }}" --token "${{ secrets.KOYEB_API_TOKEN }}" -o json 2>/dev/null || true)
            
            if [ -n "$service_info" ]; then
              status=$(echo "$service_info" | jq -r '.status' 2>/dev/null || echo "UNKNOWN")
              current_image=$(echo "$service_info" | jq -r '.definition.docker.image' 2>/dev/null || echo "UNKNOWN")
              
              echo "📊 Estado: $status | Imagen: $current_image"
              
              if [ "$status" = "HEALTHY" ] && [ "$current_image" = "${{ steps.image-tag.outputs.IMAGE_TAG }}" ]; then
                echo "🎉 ¡Despliegue exitoso! La nueva imagen está activa y healthy"
                deployment_done=true
                break
              elif [ "$status" = "UNHEALTHY" ]; then
                echo "❌ El despliegue falló - Estado: UNHEALTHY"
                exit 1
              fi
            else
              echo "⚠️ No se pudo obtener información del servicio"
            fi
            
            sleep 10
            attempt=$((attempt + 1))
          done
          
          if [ "$deployment_done" = false ]; then
            echo "⚠️ Tiempo de espera agotado. Verifica manualmente el estado del servicio."
            echo "Comando: koyeb service get ${{ secrets.KOYEB_BACKEND_SERVICE_NAME }}"
            # No salir con error ya que el servicio podría estar aún desplegando
          fi

      - name: Notify deployment status
        run: |
          echo "🚀 Proceso de despliegue completado"
          echo "Servicio: ${{ secrets.KOYEB_BACKEND_SERVICE_NAME }}"
          echo "Imagen desplegada: ${{ steps.image-tag.outputs.IMAGE_TAG }}"
          echo "📅 Timestamp: $(date)"